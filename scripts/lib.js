// Generated by CoffeeScript 1.6.2
var Derivative, State, constantAccelerant, eulerIntegration, pendulumAcceleration, personFallingThroughAirAcceleration, rk4Evaluate, rk4Integration, terminalVelocity;

State = (function() {
  function State(x, v) {
    this.x = x != null ? x : 0;
    this.v = v != null ? v : 0;
  }

  State.prototype.toString = function() {
    return "{x: " + (this.x.toPrecision(6)) + ", v: " + (this.v.toPrecision(6)) + "}";
  };

  return State;

})();

Derivative = (function() {
  function Derivative(dx, dv) {
    this.dx = dx != null ? dx : 0;
    this.dv = dv != null ? dv : 0;
  }

  return Derivative;

})();

eulerIntegration = function(state, t, dt, accelerant) {
  /*
  force = 10
  mass = 1
  accel = force / mass
  */

  var acceleration;

  acceleration = accelerant(state, t);
  return new State(state.x + state.v * dt, state.v + (acceleration * dt));
};

constantAccelerant = function(amount) {
  return function(state, t) {
    return amount;
  };
};

pendulumAcceleration = function(state, t) {
  var b, k;

  k = 10;
  b = 1;
  return (-k * state.x) - (b * state.v);
};

personFallingThroughAirAcceleration = function(state, t) {
  var airDensity, currentDirection, dragCoefficient, dragForce, dragForceDirection, frontalArea, gravity, mass, weightForce;

  gravity = -9.80665;
  mass = 75;
  weightForce = mass * gravity;
  currentDirection = 0;
  if (state.v !== 0) {
    currentDirection = state.v / Math.abs(state.v);
  }
  dragForceDirection = -1 * currentDirection;
  dragCoefficient = 0.5;
  airDensity = 1.2;
  frontalArea = 0.7;
  dragForce = dragForceDirection * (1 / 2) * dragCoefficient * airDensity * frontalArea * Math.pow(state.v, 2);
  return (dragForce + weightForce) / mass;
};

rk4Evaluate = function(initial, t, dt, derivative, accelerant) {
  var state;

  state = new State(initial.x + (derivative.dx * dt), initial.v + (derivative.dv * dt));
  return new Derivative(state.v, accelerant(state, t + dt));
};

rk4Integration = function(state, t, dt, accelerant) {
  var a, b, c, d, dvdt, dxdt;

  a = rk4Evaluate(state, t, 0.0, new Derivative(), accelerant);
  b = rk4Evaluate(state, t, dt * 0.5, a, accelerant);
  c = rk4Evaluate(state, t, dt * 0.5, b, accelerant);
  d = rk4Evaluate(state, t, dt, c, accelerant);
  dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx);
  dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);
  return new State(state.x + (dxdt * dt), state.v + (dvdt * dt));
};

terminalVelocity = function(mass, area, downwardsAcceleration) {
  var cda, dragCoefficient, mediumDensity;

  dragCoefficient = 0.5;
  mediumDensity = 1.2;
  cda = area * dragCoefficient;
  return Math.sqrt(2 * mass * downwardsAcceleration / (mediumDensity * cda));
};
